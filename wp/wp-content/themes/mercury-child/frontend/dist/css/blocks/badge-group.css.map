{"version":3,"file":"css/blocks/badge-group.css","mappings":";;;AAqEE;EACE;EACA;EACA;ACpEJ;;ADiEE;EACE;EACA;EACA;AC9DJ;;AD2DE;EACE;EACA;EACA;ACxDJ;AC4EI;EFvBF;IAOM;IACA;IACA;ECxDN;AACF;;AD8CE;EACE;EACA;EACA;AC3CJ;AC+DI;EFvBF;IAeM;IACA;IACA;ECnDN;AACF;;ADiCE;EACE;EACA;EACA;AC9BJ;ACkDI;EFvBF;IAuBM;IACA;IACA;EC9CN;AACF;;ADoBE;EACE;EACA;EACA;ACjBJ;ACqCI;EFvBF;IA+BM;IACA;IACA;ECzCN;AACF;;ADOE;EACE;EACA;EACA;ACJJ;ACwBI;EFvBF;IAuCM;IACA;IACA;ECpCN;AACF;;ADNE;EACE;EACA;EACA;ACSJ;ACWI;EFvBF;IA+CM;IACA;IACA;EC/BN;AACF;;ADnBE;EACE;EACA;EACA;ACsBJ;ACFI;EFvBF;IAuDM;IACA;IACA;EC1BN;AACF;;ADhCE;EACE;EACA;EACA;ACmCJ;;ADtCE;EACE;EACA;EACA;ACyCJ;;AD5CE;EACE;EACA;EACA;AC+CJ;;AElHA;;EAAA;ACDA;;EAAA;AHAA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;EACA;AA4HF;AAvHE;EACE;EACA;AAyHJ;AAxHI;EACE;AA0HN;AAtHE;EACE;AAwHJ;AArHE;EACE;AAuHJ;AApHE;EACE;AAsHJ;AApHE;EACE;AAsHJ;AApHE;EACE;AAsHJ;AAjHM;EAEI;AAkHV;AApHM;EAEI;AAqHV;AAvHM;EAEI;AAwHV;AA1HM;EAEI;AA2HV;AA7HM;EAEI;AA8HV;AAhIM;EAII;AA+HV;AAnIM;EAII;AAkIV;AAtIM;EAII;AAqIV;AAzIM;EAII;AAwIV;AA5IM;EAII;AA2IV;AA/IM;EAMI;AA4IV;AAlJM;EAMI;AA+IV;AArJM;EAMI;AAkJV;AAxJM;EAMI;AAqJV;AA3JM;EAMI;AAwJV,C","sources":["webpack://@mercury-child/wp/./src/shared/styles/abstracts/_text.scss","webpack://@mercury-child/wp/./src/blocks/badge-group/badge-group.scss","webpack://@mercury-child/wp/./src/shared/styles/mixins/_breakpoints.scss","webpack://@mercury-child/wp/./src/shared/styles/mixins/_helpers.scss","webpack://@mercury-child/wp/./src/shared/styles/mixins/_font.scss"],"sourcesContent":["@use 'sass:map';\n@use '@/shared/styles/mixins/breakpoints';\n\n$DEFAULT_FONT_SIZE: 16px;\n\n$body-fonts: (\n  display-2xl: (\n    font-size: var(--wp--preset--font-size--display-2xl),\n    line-height: var(--wp--custom--line-height--display-2xl),\n    letter-spacing: var(--wp--custom--letter-spacing--display-2xl),\n  ),\n  display-xl: (\n    font-size: var(--wp--preset--font-size--display-xl),\n    line-height: var(--wp--custom--line-height--display-xl),\n    letter-spacing: var(--wp--custom--letter-spacing--display-xl),\n  ),\n  display-lg: (\n    font-size: var(--wp--preset--font-size--display-lg),\n    line-height: var(--wp--custom--line-height--display-lg),\n    letter-spacing: var(--wp--custom--letter-spacing--display-lg),\n  ),\n  display-md: (\n    font-size: var(--wp--preset--font-size--display-md),\n    line-height: var(--wp--custom--line-height--display-md),\n    letter-spacing: var(--wp--custom--letter-spacing--display-md),\n  ),\n  display-sm: (\n    font-size: var(--wp--preset--font-size--display-sm),\n    line-height: var(--wp--custom--line-height--display-sm),\n    letter-spacing: var(--wp--custom--letter-spacing--display-sm),\n  ),\n  display-xs: (\n    font-size: var(--wp--preset--font-size--display-xs),\n    line-height: var(--wp--custom--line-height--display-xs),\n    letter-spacing: var(--wp--custom--letter-spacing--display-xs),\n  ),\n  text-xl: (\n    font-size: var(--wp--preset--font-size--text-xl),\n    line-height: var(--wp--custom--line-height--text-xl),\n    letter-spacing: var(--wp--custom--letter-spacing--text-xl),\n  ),\n  text-lg: (\n    font-size: var(--wp--preset--font-size--text-lg),\n    line-height: var(--wp--custom--line-height--text-lg),\n    letter-spacing: var(--wp--custom--letter-spacing--text-lg),\n  ),\n  text-md: (\n    font-size: var(--wp--preset--font-size--text-md),\n    line-height: var(--wp--custom--line-height--text-md),\n    letter-spacing: var(--wp--custom--letter-spacing--text-md),\n  ),\n  text-sm: (\n    font-size: var(--wp--preset--font-size--text-sm),\n    line-height: var(--wp--custom--line-height--text-sm),\n    letter-spacing: var(--wp--custom--letter-spacing--text-sm),\n  ),\n  text-xs: (\n    font-size: var(--wp--preset--font-size--text-xs),\n    line-height: var(--wp--custom--line-height--text-xs),\n    letter-spacing: var(--wp--custom--letter-spacing--text-xs),\n  ),\n  caption-md: (\n    font-size: var(--wp--preset--font-size--caption-md),\n    line-height: var(--wp--custom--line-height--caption-md),\n    letter-spacing: var(--wp--custom--letter-spacing--caption-md),\n  ),\n);\n\n@each $name, $params in $body-fonts {\n  body {\n    --lb-font-size-#{$name}-relative: #{map.get($params, 'font-size')};\n    --lb-line-height-#{$name}-relative: #{map.get($params, 'line-height')};\n    --lb-letter-spacing-#{$name}-relative: #{map.get($params, 'letter-spacing')};\n\n    @if $name == 'display-lg' {\n      @include breakpoints.media-breakpoint-down(sm) {\n        --lb-font-size-#{$name}-relative: #{map.get(map.get($body-fonts, display-sm), 'font-size')};\n        --lb-line-height-#{$name}-relative: #{map.get(map.get($body-fonts, display-sm), 'line-height')};\n        --lb-letter-spacing-#{$name}-relative: #{map.get(map.get($body-fonts, display-sm), 'letter-spacing')};\n      }\n    }\n\n    @if $name == 'display-md' {\n      @include breakpoints.media-breakpoint-down(sm) {\n        --lb-font-size-#{$name}-relative: #{map.get(map.get($body-fonts, display-xs), 'font-size')};\n        --lb-line-height-#{$name}-relative: #{map.get(map.get($body-fonts, display-xs), 'line-height')};\n        --lb-letter-spacing-#{$name}-relative: #{map.get(map.get($body-fonts, display-xs), 'letter-spacing')};\n      }\n    }\n\n    @if $name == 'display-sm' {\n      @include breakpoints.media-breakpoint-down(sm) {\n        --lb-font-size-#{$name}-relative: #{map.get(map.get($body-fonts, display-xs), 'font-size')};\n        --lb-line-height-#{$name}-relative: #{map.get(map.get($body-fonts, display-xs), 'line-height')};\n        --lb-letter-spacing-#{$name}-relative: #{map.get(map.get($body-fonts, display-xs), 'letter-spacing')};\n      }\n    }\n\n    @if $name == 'display-xs' {\n      @include breakpoints.media-breakpoint-down(sm) {\n        --lb-font-size-#{$name}-relative: #{map.get(map.get($body-fonts, text-xl), 'font-size')};\n        --lb-line-height-#{$name}-relative: #{map.get(map.get($body-fonts, text-xl), 'line-height')};\n        --lb-letter-spacing-#{$name}-relative: #{map.get(map.get($body-fonts, text-xl), 'letter-spacing')};\n      }\n    }\n\n    @if $name == 'text-xl' {\n      @include breakpoints.media-breakpoint-down(sm) {\n        --lb-font-size-#{$name}-relative: #{map.get(map.get($body-fonts, text-lg), 'font-size')};\n        --lb-line-height-#{$name}-relative: #{map.get(map.get($body-fonts, text-lg), 'line-height')};\n        --lb-letter-spacing-#{$name}-relative: #{map.get(map.get($body-fonts, text-lg), 'letter-spacing')};\n      }\n    }\n\n    @if $name == 'text-lg' {\n      @include breakpoints.media-breakpoint-down(sm) {\n        --lb-font-size-#{$name}-relative: #{map.get(map.get($body-fonts, text-sm), 'font-size')};\n        --lb-line-height-#{$name}-relative: #{map.get(map.get($body-fonts, text-sm), 'line-height')};\n        --lb-letter-spacing-#{$name}-relative: #{map.get(map.get($body-fonts, text-sm), 'letter-spacing')};\n      }\n    }\n\n    @if $name == 'text-md' {\n      @include breakpoints.media-breakpoint-down(sm) {\n        --lb-font-size-#{$name}-relative: #{map.get(map.get($body-fonts, text-sm), 'font-size')};\n        --lb-line-height-#{$name}-relative: #{map.get(map.get($body-fonts, text-sm), 'line-height')};\n        --lb-letter-spacing-#{$name}-relative: #{map.get(map.get($body-fonts, text-sm), 'letter-spacing')};\n      }\n    }\n  }\n}\n","@use 'sass:math';\n@use '@/shared/styles/abstracts/colors';\n@use '@/shared/styles/mixins/font';\n\n.lb-badge-group {\n  display: inline-flex;\n  border-radius: 16px;\n  justify-content: center;\n  align-items: center;\n  column-gap: 8px;\n  background-color: var(--lb-badge--background--color);\n  text-decoration: none;\n  padding: 4px 12px;\n\n  &__label {\n  }\n\n  &__container {\n    padding: 0;\n    --lb-badge--background--color: transparent;\n    & :where([class^='icon-'], [class*=' icon-']) {\n      font-size: font.font-size-by-name('text-md');\n    }\n  }\n\n  &--align_left {\n    padding-left: 4px;\n  }\n\n  &--align_right {\n    padding-right: 4px;\n  }\n\n  &--size_sm {\n    column-gap: calc(var(--wp--preset--spacing--70) / 2);\n  }\n  &--size_md {\n    column-gap: var(--wp--preset--spacing--60);\n  }\n  &--size_lg {\n    column-gap: var(--wp--preset--spacing--70);\n  }\n\n  @each $theme in 'light', 'medium', 'dark' {\n    @each $colorName in colors.$colorNames {\n      &--theme_#{$theme}:where(#{'&--color_' + $colorName}) {\n        @if $theme == 'light' {\n          --lb-badge--background--color: var(--wp--preset--color--#{$colorName}-50);\n        } @else if $theme == 'medium' {\n          --lb-badge--background--color: var(--wp--preset--color--#{$colorName}-100);\n        } @else if $theme == 'dark' {\n          --lb-badge--background--color: var(--wp--preset--color--#{$colorName}-50);\n        }\n      }\n    }\n  }\n}\n","@use \"sass:list\";\n@use \"sass:map\";\n$grid-breakpoints: (\n  xs: 0,\n  sm: 576px,\n  md: 768px,\n  lg: 992px,\n  xl: 1280px,\n  xxl: 1400px,\n);\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map.keys($breakpoints)\n) {\n  $n: list.index($breakpoint-names, $name);\n  @return if(\n    $n != null and $n < list.length($breakpoint-names),\n    list.nth($breakpoint-names, $n + 1),\n    null\n  );\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map.get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n","@use \"sass:list\";\n@use \"sass:map\";\n@use \"sass:math\";\n@use \"sass:meta\";\n@use \"sass:string\";\n/**\n* helpers\n**/\n@mixin print($declarations) {\n  @each $property, $value in $declarations {\n    #{$property}: $value;\n  }\n}\n\n@mixin pseudo($display: block, $pos: absolute, $content: '') {\n  content: $content;\n  display: $display;\n  position: $pos;\n}\n\n@mixin wp-editor-fix($r) {\n  @at-root {\n    #{$r} {\n      @content;\n    }\n  }\n  #{$r} {\n    @content;\n  }\n}\n\n/// Remove element in list\n@function remove-nth($list, $index) {\n  $result: null;\n\n  @if meta.type-of($index) != number {\n    @warn \"$index: #{string.quote($index)} is not a number for `remove-nth`.\";\n  } @else if $index == 0 {\n    @warn \"List index 0 must be a non-zero integer for `remove-nth`.\";\n  } @else if math.abs($index) > list.length($list) {\n    @warn \"List index is #{$index} but list is only #{list.length($list)} item long for `remove-nth`.\";\n  } @else {\n    $result: ();\n    $index: if($index < 0, list.length($list) + $index + 1, $index);\n\n    @for $i from 1 through list.length($list) {\n      @if $i != $index {\n        $result: list.append($result, list.nth($list, $i));\n      }\n    }\n  }\n\n  @return $result;\n}\n\n/// list to string\n@function implode($pieces, $glue: \"\") {\n\t$result: null;\n\t@for $i from 1 through list.length($pieces) {\n\t\t$piece: list.nth($pieces, $i);\n\t\t@if meta.type-of($piece) == list {\n\t\t\t$result: string.unquote(\"#{$result}#{$glue}#{implode($piece, $glue)}\");\n\t\t} @else {\n\t\t\t$result: string.unquote(\"#{$result}#{$glue}#{$piece}\");\n\t\t}\n\t}\n\t@if $result != null {\n\t\t$result: string.slice($result, string.length($glue) + 1, -1);\n\t}\n\t@return $result;\n}\n\n@function str-to-num($value) {\n  @if meta.type-of($value) == 'number' {\n    @return $value;\n  } @else if meta.type-of($value) != 'string' {\n    $_: log('Value for `to-number` should be a number or a string.');\n  }\n  \n  $result: 0;\n  $digits: 0;\n  $minus: string.slice($value, 1, 1) == '-';\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n  \n  @for $i from if($minus, 2, 1) through string.length($value) {\n    $character: string.slice($value, $i, $i);\n    \n    @if not (list.index(map.keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), string.slice($value, $i))\n    }\n    \n    @if $character == '.' {\n      $digits: 1; \n    } @else if $digits == 0 {\n      $result: $result * 10 + map.get($numbers, $character);  \n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map.get($numbers, $character) / $digits;\n    }\n  }\n  \n  @return if($minus, -$result, $result);;\n}\n","@use 'sass:map';\n@use '../abstracts/text';\n@use 'helpers';\n\n/**\n* font\n**/\n\n/// Convert px to rem font-size\n/// @author NN\n/// @access public\n/// @param {String} $size - yor font-size in px\n@mixin font-size($size) {\n  font-size: font-size($size);\n}\n\n/// Convert px to rem font-size\n/// @author NN\n/// @access public\n/// @param {String} $size - yor font-size in px\n@function font-size($size) {\n  @return calc($size / text.$DEFAULT_FONT_SIZE * 1rem);\n}\n\n/// Get full text styles\n/// @author NN\n/// @access public\n/// @param {String} $size - font size name\n/// @param {Boolean} $relative - Set true if you need font scale depending on the screen resolution\n@mixin get-text-styles($size, $relative: true) {\n  font-size: font-size-by-name($size, $relative);\n  line-height: line-height-by-name($size, $relative);\n  letter-spacing: letter-spacing-by-name($size, $relative);\n}\n\n/// Get font size by name\n/// @author NN\n/// @access public\n/// @param {String} $size - font size name\n/// @param {Boolean} $relative - Set true if you need font scale depending on the screen resolution\n@mixin font-size-by-name($size, $relative: true) {\n  font-size: font-size-by-name($size, $relative);\n}\n\n/// Get font size by name\n/// @author NN\n/// @access public\n/// @param {String} $size - font size name\n/// @param {Boolean} $relative - Set true if you need font scale depending on the screen resolution\n@function font-size-by-name($size, $relative: true) {\n  @if $relative {\n    @return var(--lb-font-size-#{$size}-relative);\n  } @else {\n    @return var(--wp--preset--font-size--#{$size});\n  }\n}\n\n/// Get line height size by name\n/// @author NN\n/// @access public\n/// @param {String} $size - font size name\n/// @param {Boolean} $relative - Set true if you need font scale depending on the screen resolution\n@function line-height-by-name($size, $relative: true) {\n  @if $relative {\n    @return var(--lb-line-height-#{$size}-relative);\n  } @else {\n    @return var(--wp--custom--line-height--#{$size});\n  }\n}\n\n/// Get letter spacing size by name\n/// @author NN\n/// @access public\n/// @param {String} $size - font size name\n/// @param {Boolean} $relative - Set true if you need font scale depending on the screen resolution\n@function letter-spacing-by-name($size, $relative: true) {\n  @if $relative {\n    @return var(--lb-letter-spacing-#{$size}-relative, inherit);\n  } @else {\n    @return var(--wp--custom--letter-spacing--#{$size}, inherit);\n  }\n \n}\n\n/// Convert photoshop letter spacing to css letter spacing\n/// @author NN\n/// @access public\n/// @param {Number} $points - photoshop points\n@mixin letter-spacing($points) {\n  letter-spacing: letter-spacing($points);\n}\n\n/// Convert photoshop letter spacing to css letter spacing\n/// @author NN\n/// @access public\n/// @param {Number} $points - photoshop points\n@function letter-spacing($points) {\n  @return calc($points / 1000 * 1em);\n}\n\n/// Convert px to em line height\n/// @author NN\n/// @access public\n/// @param {Number} $lh - line height in px that you want\n/// @param {Number} $fs - relative font size\n@mixin line-height($lh, $fs: text.$DEFAULT_FONT_SIZE) {\n  line-height: line-height($lh, $fs);\n}\n\n/// Convert px to em line height\n/// @author NN\n/// @access public\n/// @param {Number} $lh - line height in px that you want\n/// @param {Number} $fs - relative font size\n@function line-height($lh, $fs: text.$DEFAULT_FONT_SIZE) {\n  @return px-to-em($lh, $fs);\n}\n\n/// Convert px to em\n/// @author NN\n/// @access public\n/// @param {Number} $p1 - first size\n/// @param {Number} $p2 - second size\n@function px-to-em($p1, $p2) {\n  @return calc($p1 / $p2 * 1em);\n}\n\n/// Get font config for selected text type\n/// @author NN\n/// @access public\n/// @param {String} $level - level size (see text-settings map at _variables.scss)\n@mixin text-setting($level) {\n  @include helpers.print(map.get($text-settings, $level));\n}\n\n/// Truncate words\n/// @author NN\n/// @access public\n/// @param {String} $truncation-boundary - container boundary size\n@mixin truncate($truncation-boundary) {\n  max-width: $truncation-boundary;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/// Reset tag <a> styles\n/// @author NN\n/// @access public\n/// @param {Boolean} $hover - if true - enable hover text decoration\n@mixin reset-link($hover: false) {\n  color: inherit;\n  text-decoration: none;\n  @if ($hover) {\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n}\n\n/// Generate fontawesome icon\n/// @author NN\n/// @access public\n/// @param {String} $icon - icon number\n/// @param {Boolean} $after - if true - will be used :after for icon container\n@mixin font-awesome($icon, $after: false) {\n  font-family: 'Font Awesome 5 Free';\n  font-weight: 900;\n  @if ($after) {\n    &:after {\n      content: $icon;\n    }\n  } @else {\n    content: $icon;\n  }\n}\n\n/// Generate font params\n/// @author NN\n/// @access public\n/// @param {String} $icon - icon number\n/// @param {Boolean} $after - if true - will be used :after for icon container\n@mixin font($fm: false, $size: false, $weight: false, $lh: false, $color: false) {\n  @if $fm {\n    font-family: $fm;\n  }\n  @if $size {\n    font-size: font-size($size);\n  }\n  @if $size {\n    font-size: font-size($size);\n  }\n  @if $color {\n    color: $color;\n  }\n  @if $weight {\n    font-weight: $weight;\n  }\n  @if $lh {\n    line-height: $lh;\n  }\n}\n"],"names":[],"sourceRoot":""}