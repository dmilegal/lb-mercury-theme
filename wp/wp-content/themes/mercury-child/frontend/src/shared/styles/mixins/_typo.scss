/**
* itertors
**/
@mixin make-prose($groupName, $selectorList, $customProseSelector, $isEditor: false) {
  @if $customProseSelector {
    @if $selectorList != '' {
      #{$customProseSelector}
        :is(
          :where(#{$selectorList}):not(
              :where([class~='not-prose'], [class~='not-prose'] *),
              :where([class~='acf-fields'], [class~='acf-fields'] *)
            )
        ) {
        @content;
      }

      @if ($groupName == 'spaces' and $isEditor) {
        .editor-styles-wrapper .is-layout-flow > :is(
          :where(#{$selectorList}):not(
              :where([class~='not-prose'], [class~='not-prose'] *),
              :where([class~='acf-fields'], [class~='acf-fields'] *)
            )
        ) {
          @content;
        }
      }
    } @else {
      #{$customProseSelector}:not(
        :where([class~='not-prose'], [class~='not-prose'] *),
        :where([class~='acf-fields'], [class~='acf-fields'] *)
      ) {
        @content;
      }
    }
  } @else {
    @if $selectorList != '' {
      .prose-#{$groupName}
        :is(
          :where(#{$selectorList}):not(
              :where([class~='not-prose'], [class~='not-prose'] *),
              :where([class~='acf-fields'], [class~='acf-fields'] *)
            )
        ) {
        @content;
      }
    } @else {
      .prose-#{$groupName}:not(
        :where([class~='not-prose'], [class~='not-prose'] *),
        :where([class~='acf-fields'], [class~='acf-fields'] *)
      ) {
        @content;
      }
    }
  }
}
