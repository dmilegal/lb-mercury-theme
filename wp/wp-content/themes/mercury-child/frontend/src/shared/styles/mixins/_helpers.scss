@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:string";
/**
* helpers
**/
@mixin print($declarations) {
  @each $property, $value in $declarations {
    #{$property}: $value;
  }
}

@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

@mixin wp-editor-fix($r) {
  @at-root {
    #{$r} {
      @content;
    }
  }
  #{$r} {
    @content;
  }
}

/// Remove element in list
@function remove-nth($list, $index) {
  $result: null;

  @if meta.type-of($index) != number {
    @warn "$index: #{string.quote($index)} is not a number for `remove-nth`.";
  } @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `remove-nth`.";
  } @else if math.abs($index) > list.length($list) {
    @warn "List index is #{$index} but list is only #{list.length($list)} item long for `remove-nth`.";
  } @else {
    $result: ();
    $index: if($index < 0, list.length($list) + $index + 1, $index);

    @for $i from 1 through list.length($list) {
      @if $i != $index {
        $result: list.append($result, list.nth($list, $i));
      }
    }
  }

  @return $result;
}

/// list to string
@function implode($pieces, $glue: "") {
	$result: null;
	@for $i from 1 through list.length($pieces) {
		$piece: list.nth($pieces, $i);
		@if meta.type-of($piece) == list {
			$result: string.unquote("#{$result}#{$glue}#{implode($piece, $glue)}");
		} @else {
			$result: string.unquote("#{$result}#{$glue}#{$piece}");
		}
	}
	@if $result != null {
		$result: string.slice($result, string.length($glue) + 1, -1);
	}
	@return $result;
}

@function str-to-num($value) {
  @if meta.type-of($value) == 'number' {
    @return $value;
  } @else if meta.type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }
  
  $result: 0;
  $digits: 0;
  $minus: string.slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
  @for $i from if($minus, 2, 1) through string.length($value) {
    $character: string.slice($value, $i, $i);
    
    @if not (list.index(map.keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), string.slice($value, $i))
    }
    
    @if $character == '.' {
      $digits: 1; 
    } @else if $digits == 0 {
      $result: $result * 10 + map.get($numbers, $character);  
    } @else {
      $digits: $digits * 10;
      $result: $result + map.get($numbers, $character) / $digits;
    }
  }
  
  @return if($minus, -$result, $result);;
}
